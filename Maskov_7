HTML файл

<!DOCTYPE html>
<html>
<head>
Выгружаем нужные нам библиотеки
    <meta charset="UTF-8" />
    <title>Жизненный цикл, управление ресурсами и составные компоненты</title>
    <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.25.0/babel.min.js"></script>
    <link rel="stylesheet" href="style.css">
</head>
<body>
Добавляем 3 контейенера
<div id="app"> </div>
<div id="app1"> </div>
<div id="app2"> </div>


Создания событий внутри
<script type="text/babel">
    class ClickButton extends React.Component {

        constructor(props) {
            super(props);
            this.state = {class: "off", label: "Нажми"};

            this.press = this.press.bind(this);

            console.log("constructor");
        }
        componentWillReceiveProps(nextProps) {
            console.log("componentWillReceiveProps()");
        }
        componentWillMount(){
            console.log("componentWillMount()");
        }

        press(){
            var className = (this.state.class==="off")?"on":"off";
            this.setState({class: className});
        }
        render() {
            console.log("render()");
            return <button onClick={this.press} className={this.state.class}>{this.state.label}</button>;
        }
        shouldComponentUpdate(){
            console.log("shouldComponentUpdate()");
            return true;
        }
        componentWillUpdate(){
            console.log("componentWillUpdate()");
        }
        componentDidUpdate(){
            console.log("componentDidUpdate()");
        }


    }
    ReactDOM.render(
        <ClickButton />,
        document.getElementById("app")
    )


    class Clock extends React.Component {
        constructor(props) {
            super(props);
            this.state = {date: new Date()};
            this.unmount = this.unmount.bind(this);
        }
        unmount(){
            ReactDOM.unmountComponentAtNode(document.getElementById("app2"));
        }
        componentDidMount() {
            this.timerId = setInterval(
                ()=> this.tick(),
                1000
            );
            console.log("componentDidMount()");
        }

        componentWillUnmount() {
            clearInterval(this.timerId);
            console.log("componentWillUnmount()");
        }

        tick() {
            this.setState({
                date: new Date()
            });
        }

        render() {
            return (
                <div>
                    <h2>Текущее время {this.state.date.toLocaleTimeString()}.</h2>
                    <button onClick={this.unmount}>Скрыть</button>
                </div>
            );
        }
    }
    ReactDOM.render(
        <Clock />,
        document.getElementById("app1")
    )

Добавляем список группы
    const propsValues = {
        title: "Список группы",
        items: [
            "Ровенский",
            "Шашин",
            "ТОпалу",
            "Масков",
            "Ибрагимов",
            "Фролов"
        ]
    };

    class SearchPlugin extends React.Component{

        constructor(props){
            super(props);
            this.onTextChanged = this.onTextChanged.bind(this);
        }

        onTextChanged(e){
            var text = e.target.value.trim();   // удаляем пробелы
            this.props.filter(text); // передаем введенный текст в родительский компонент
        }

        render() {
            return <input placeholder="Поиск" onChange={this.onTextChanged} />;
        }
    }





    class Item extends React.Component {
        render() {
            return <li>{this.props.name}</li>;
        }
    }



    class ItemsList extends React.Component {
        constructor(props){
            super(props);
            this.state = { items: this.props.data.items};

            this.filterList = this.filterList.bind(this);
        }

        filterList(text){
            var filteredList = this.props.data.items.filter(function(item){
                return item.toLowerCase().search(text.toLowerCase())!== -1;
            });
            this.setState({items: filteredList});
        }

        render() {
            return(
                <div>
                    <h2>{this.props.data.title}</h2>
                    <SearchPlugin filter={this.filterList} />
                    <ul>
                        {
                            this.state.items.map(function(item){
                                return <Item key={item} name={item} />
                            })
                        }
                    </ul>
                </div>);
        }
    }



Выводим на экран

    ReactDOM.render(
        <ItemsList data={propsValues} />,
        document.getElementById("app2")
    )
</script>
</body>
</html>
