HTML файл

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <link rel="stylesheet" href="style.css">
  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <title>To-do app</title>
</head>
<body>
  <div id="app">
    <div class="stats">
      <h3 class="stats__title">{{"Текущих задач: "+ tasks.length}}</h3>
    </div>
    <task @task_done="delete_task(index)" :key="index" v-for="(data,index) in tasks" :data="data" ></task>
    <div class="add_task">
      <div class="add_task__input ">
          <input placeholder="Новая задача..." type="text" v-model="new_task.title">
          <textarea placeholder="Описание" type="text" v-model="new_task.desc"></textarea>
      </div>
      <button class="add_task__btn" @click="add_task">➕</button>
    </div>
  </div>
</body>
<script src="script.js"></script>
</html>

Js файл

Vue.component('task',{
    props: ['data'],
    data() {
        return {
        }
    },
    methods: {
        task_done(){
            this.$emit('task_done')
        }
    },
    template: `
  <div class="task">
    <div>
      <h3 class="task__title">{{data.title}}</h3>
      <p v-if="data.desc!=''" class="task__desc">{{data.desc}}</p>
    </div>
    <button class="task__done" @click="task_done()">✔️</button>
  </div>`
})

var vue = new Vue({
    el: '#app',
    data: {
        string: 'asdasda',
        new_task: {
            title: '',
            desc: ''
        },
        tasks : [
            {
                title: 'Сдать экзамен',
                desc: 'Во вторник',
            },
            {
                title: 'Изучить JS"',
                desc: '',
            }
        ]
    },
    methods: {
        add_task(){
            if(this.new_task.title != ''){
                this.tasks.push({
                    title: this.new_task.title,
                    desc: this.new_task.desc
                });
                this.new_task.title='';
                this.new_task.desc='';
            }
        },
        delete_task(id){
            this.tasks.splice(id,1);
        }
    }
})

CSS файл

:root {
    --main: #2F4858;
    --white: #fff;
}
* {
    padding: 0;
    margin: 0;
    transition: all 0.3s;
}
#app{
    width: 320px;
    box-shadow: 0 3px 20px #00000023;
    font-family: 'Gilroy', sans-serif;
    padding: 10px;
    margin: 20px 0 0 20px;
    color: var(--main);
}
.stats {
    margin: 0px;
}
.stats__title {
    margin: -10px -10px 10px -10px;
    padding: 10px;
    background-color: var(--main);
    color: var(--white);
    font-weight: 500;
}
.task {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    margin: -10px -10px 10px -10px;
    padding: 10px;
    max-width: 100%;
}
.task:hover {
    background-color: #2f485811;
}
.task__title {
    font-size: 18px;
}
.task__desc {
    font-weight: 500;
    font-size: 16px;
}
.task__done {
    height: 30px;
    width: 30px !important;
    border: none;
    background-color: unset;
}
.task__done:hover {
    cursor: pointer;
    border-radius: 4px;
    background-color: #9ee493bb;
}
.add_task {
    display: flex;

}
.add_task__input {
    width: 80%;
}
.add_task__input input, textarea {
    width: 100%;
    max-width: 100%;
    padding: 5px 0 5px 5px;
    font-family: 'Gilroy',sans-serif;
    border: 2px solid #2f485811;
    border-radius: 4px;
}
.add_task__input input {
    margin-bottom: 5px;
}
.add_task__btn {
    width: 20%;
    border: none;
    margin-left: 20px;
    background-color: unset;
}
.add_task__btn:hover {
    cursor: pointer;
    border-radius: 4px;
    background-color: #2f485811;
}
