HTML файл

<!DOCTYPE html>
<html >
<head>
Используем формы
  <meta charset="UTF-8">
  <title>Формы в React</title>
  <link rel="stylesheet" href="style.css">

</head>
<body>
<div id="app"></div>
Выгружаем нужные нам библиотеки
<script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.25.0/babel.min.js"></script>

<script type="text/babel" >

  class NameField extends React.Component {
    constructor(props) {
      super(props);
      var valid = this.validate(props.name)
      this.state = {name: props.name, nameValid: valid}
      this.onChange = this.onChange.bind(this);
    }

    validate(val) {
      return val.length > 2;
    }

    onChange(e) {
      var val = e.target.value;
      var valid = this.validate(val);
      this.setState({name: val, nameValid: valid});
    }

    render() {
      var nameColor = this.state.nameValid === true ? "green" : "red";
      return (
              <p>
                <label>Имя:<br/>
                  <input type="text" value={this.state.name}
                         onChange={this.onNameChange}
                         style={{borderColor: nameColor}}/>
                </label>
              </p>
      );
    }
  }
  class UserForm extends React.Component {
    constructor(props) {
      super(props);
      var name = props.name;
      var age = props.age;
      this.state = {
        name: name, age: age
      };
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleSubmit(e) {
      e.preventDefault();
      if (this.refs.nameField.state.nameValid === true && this.refs.ageField.state.ageValid === true) {
        alert("Имя: " + this.refs.nameField.state.name + " Возраст: " + this.refs.ageField.state.age);
      }
    }

    render() {
      return (
              <form onSubmit={this.handleSubmit}>
                <NameField value name={this.state.name} ref="nameField"/>
                <AgeField value age={this.state.age} ref="ageField"/>
                <input type="submit" value="Отправить"/>
              </form>
      );
    }
  }

  class AgeField extends React.Component {

    constructor(props) {
      super(props);
      var valid = this.validate(props.age)
      this.state = {age: props.age, ageValid: valid}
      this.onChange = this.onChange.bind(this);
    }

    validate(val) {
      return val > 0;
    }

    onChange(e) {
      var val = e.target.value;
      var valid = this.validate(val);
      this.setState({age: val, ageValid: valid});
    }

    render() {
      var ageColor = this.state.ageValid === true ? "green" : "red";
      return (
              <p>
                <label>Возраст:<br/>
                  <input type="number" value={this.state.age}
                         onChange={this.onAgeChange}
                         style={{borderColor: ageColor}}/>
                </label>
              </p>
      );
    }
  }

Выгружаем результат

  ReactDOM.render(
При запуске программы в поля автоматически вставляются мои данные
          <UserForm name="Nikita" age="22" />,
          document.getElementById("app")
  )
</script>
</body>
</html>
